name: build addon

on:
  push:
    tags: ["*"]
    # To build on main/master branch, uncomment the following line:
    branches: [ main , master ]

  pull_request:
    branches: [ main, master ]

  workflow_dispatch:

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    # - run: echo -e "pre-commit\nscons\nmarkdown">requirements.txt
    # - run: (echo pre-commit & echo scons & echo markdown) > requirements.txt

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11-32
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install -r requirements.txt
        pip install -r requirements-libs.txt --target ./addon/globalPlugins/CaptionLocal/libs
        # $env:PATH = "$(Get-Location)\bin;$env:PATH"


        # sudo apt-get update  -y
        # sudo apt-get install -y gettext

    - name: Code checks
      # run: export SKIP=no-commit-to-branch; pre-commit run --all
      run: $env:SKIP = "no-commit-to-branch"; pre-commit run --all
      

    - name: building addon
      run: scons

    - uses: actions/upload-artifact@v4
      with:
        name: packaged_addon
        path: ./*.nvda-addon

  upload_release:
    runs-on: ubuntu-latest
    environment: 
      name: myenv

    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: ["build"]
    steps:
    - uses: actions/checkout@v4
    - name: download releases files
      uses: actions/download-artifact@v4
    - name: Display structure of downloaded files
      run: ls -R

    - name: Release
      uses: softprops/action-gh-release@v2
      # if: startsWith(github.ref, 'refs/tags/')
      with:
        files: packaged_addon/*.nvda-addon
        fail_on_unmatched_files: true
        # token:${{secrets.RELEASE_TOKEN}}
        # token:  helloworld
        make_latest: true
        repository: tianzeshi-study/CaptionClient
        # token: ${{ secrets.ACCESS_TOKEN }}
        # token: ${{ secrets.RELEASE_TOKEN }}
        prerelease: ${{ contains(github.ref, '-') }}
        # token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
        # token: ${{ secrets.GITHUB_TOKEN }}
        body: "new release" 
      env:
        # token: ${{ secrets.RELEASE_TOKEN }}
        token: ${{ secrets.ACCESS_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub 提供的默认 Token

